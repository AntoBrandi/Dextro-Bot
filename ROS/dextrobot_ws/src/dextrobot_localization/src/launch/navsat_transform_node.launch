<?xml version="1.0"?>

<!-- This comes from the navsat_transform_template.launch. Explains what this node does.
     This node needs to know the values of three variables in order to function:
     (1) A world-referenced heading (yaw). The node assumes an ENU standard for heading, with 0 facing east, though
         it can support any heading.
     (2) Odometry data that gives the robot's current pose in its own local coordinate frame (typically map or odom)
     (3) A latitude/longitude/altitude.
     These three items allow us to compute a transform from the global frame to your robot's local frame. There are
     several means of providing them, though keep in mind that these modes are typically mutually exclusive.
     (1) World-referenced yaw can be provided by:
           (a) an IMU in a sensor_msgs/Imu message (topic is /imu/data/)
           (b) the heading in the nav_msgs/Odometry message in (2) below can be used. To enable this behavior, set
               the use_odometry_yaw parameter to true, and set the delay parameter to some small value (~3 seconds).
               Be careful, though: this heading must still be globally referenced, so if your state estimation node
               always starts with a 0 heading, you CAN NOT use this option.
           (c) the "datum" service. See below.
     (2) The odometry data, which needs to have a valid frame_id, can be provided by:
           (a) a nav_msgs/Odometry message from your robot_localization state estimation node.
           (b) the "datum" service (all odometry variables are assumed to be 0 in this case). See below.
     (3) The latitude, longitude, and altitude can be provided by:
           (a) a sensor_msgs/NavSatFix message
           (b) the "datum" service
     (4) Alternatively, at any time, the user can send a robot_localization/SetDatum service message to the "datum" service. 
         This will manually set the latitude, longitude, altitude, and world-referenced heading, and will assume an odometry 
         message containing all zeros. This will effectively set the origin at the specified lat-long, with the X-axis
         aligned with east. The user can set this datum via the "datum" service, or via the launch file. If the wait_for_datum
         parameter is set to true, then the node will attempt to use the datum parameter. If the parameter is not set, it will
         wait until it receives a service call.
     The output of this node is an odometry message that contains the GPS data transformed into the robot's world coordinate
     frame (i.e., the frame specified by input (2)'s frame_id), or the coordinate frame defined by the message sent to the
     "datum" service.
-->



<!-- Launch file for navsat_transform_new_node:
 - travelled_distance: set the distance for GPS publishing 
 - localOdomTopic: name of the topic from which get the travelled distance -->

<launch>
    <arg name="wait_for_datum" default="false" /> <!-- if navsat must take the orientation from the imu or from the datum service -->
    <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node" respawn="true" output="screen">
        <!-- If your IMU does not account for magnetic declination -->
        <!-- Now magnetic declination is not internally set in the IMU (it can be set during the calibration) -->
	<!-- param name="magnetic_declination_radians" value="0.001164"/ --> 
        <!-- Value for Valencia: -0.06'W = -0.00147198 rads -->
        <!-- Value for Lisbon: -2.40'W = -2.66 rads -->
        <!-- magnetic declination is used to correct the difference between the magnetic north and the true north, which is s
        usually, imus provide an orientation based on a magnetometer, so magnetic declination must be added as an offset to the orientation value.
        if an imu (although not likely) provides the orientation wrt the true north, this parameter MUST BE 0
        in simulation, the orientation provided by the imu is likely to be provided relative to the initial position, so this parameter MUST BE 0 in that case.
        in which case the imu would be "aligned" with the axis
        -->
        <param name="magnetic_declination_radians" value="0.0"/> 

        <!-- yaw_offset: an offset that can be added to correct the orientation, so it is aligned as robot_localization expects, which at this time (30/8/2016) is ENU (x facing east, y facing north)
        if the imu absolute orientation is 0 when facing north, this value MUST BE PI/2
        if the imu absolute orientation is 0 when facing east, this value MUST BE 0
        in simulation, we can leave this value to 0, and asume that the robot would be facing east on it's initial position -->
        <param name="yaw_offset" value="0"/>
        <!-- so, imu.yaw + magnetic_declination + yaw_offset MUST BE 0 when the robot is facing east. set the values and the sign according to that -->

        <param name="use_odometry_yaw" value="false" /> <!-- if false, take yaw from imu. if true, from odom -->
        <param name="wait_for_datum" value="$(arg wait_for_datum)" />
        <!-- If this is true, the altitude is set to 0 in the output odometry message. Defaults
            to false. -->
        <param name="zero_altitude" value="true" />

        <!-- Publish the transform between utm and world 
	(frame of the input odometry data, in this case /odometry/filtered_world) 
	It is a static transform -->
        <param name="broadcast_utm_transform" value="true"/>
        <param name="publish_filtered_gps" value="true" />

        <!-- Placeholders for input remapping. Set your topic names as the "to" values.-->
        <!-- remap from="/gps/fix" to="/mavros/gps/fix"/--> <!-- used to compute the absolute position in utm coordinates --> 
        <!-- remap from="/gps/fix" to="/ublox_gps/fix" / -->
	    
        <!-- Used to get the current odometry 
             It should be the output of the 'world' instance of robot_localization -->
        <remap from="/odometry/filtered" to="/odometry/filtered_world" /> 
       
        <!-- remap from="/imu/data" to="/imu/data"/ -->      <!-- used to get the initial absolute orientation, after it gets it, the node UNSUBSCRIBES from the topic -->
    
    </node>
</launch>

<!-- Another options is to use the navsat_transform_new_node from dextrobot_localization
	(this node comes commented in the packages -> edit the CMakeLists.txt file to use it)
	It publishes the GPS odometry only if the robot has moved of a configurable distance.
	PARAMS:
	 - travelled_distance: set the distance for GPS publishing 
	 - localOdomTopic: name of the topic from which get the travelled distance -->
